package com.codecampushubt.NCKH2024TQQD.service.UserServices;

import java.security.PublicKey;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

import com.cloudinary.Cloudinary;
import com.codecampushubt.NCKH2024TQQD._enum.Admin.User.AccountStatus;
import com.codecampushubt.NCKH2024TQQD.dao.RoleRepository;
import com.codecampushubt.NCKH2024TQQD.dao.UserRoleRepository;
import com.codecampushubt.NCKH2024TQQD.dto.UserDTO.UserCreateDTO;
import com.codecampushubt.NCKH2024TQQD.dto.UserDTO.UserShowDTO;
import com.codecampushubt.NCKH2024TQQD.dto.UserDTO.UserUpdateDTO;
import com.codecampushubt.NCKH2024TQQD.entity.Role;
import com.codecampushubt.NCKH2024TQQD.entity.UserRole;
import com.codecampushubt.NCKH2024TQQD.entity.UserRoleId;
import com.codecampushubt.NCKH2024TQQD.service.Cloudinary.CloudinaryService;
import com.codecampushubt.NCKH2024TQQD.util.BCryptPasswordUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;

import org.springframework.data.repository.query.Param;

import org.springframework.stereotype.Service;

import com.codecampushubt.NCKH2024TQQD.dao.UserRepository;
import com.codecampushubt.NCKH2024TQQD.dto.LoginDTO.LoginBasicDTO;
import com.codecampushubt.NCKH2024TQQD.dto.UserDTO.UserBasicInfoDTO;
import com.codecampushubt.NCKH2024TQQD.entity.User;

@Service

public class UserServiceImpl implements UserService {
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final PasswordEncoder passwordEncoder;
    private final UserRoleRepository userRoleRepository;
    private final CloudinaryService cloudinaryService;

    @Autowired
    public UserServiceImpl(UserRepository userRepository,
                           RoleRepository roleRepository,
                           PasswordEncoder passwordEncoder,
                           UserRoleRepository userRoleRepository,
                           CloudinaryService cloudinaryService
    ) {

        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
        this.passwordEncoder = passwordEncoder;
        this.userRoleRepository = userRoleRepository;
        this.cloudinaryService = cloudinaryService;
    }

    @Override
    public ArrayList<UserBasicInfoDTO> getUserBasicInfo(Long userID) {
        return userRepository.getUserBasicInfo(userID);
    }

    @Override
    public ArrayList<User> findAll() {
        return (ArrayList<User>) userRepository.findAll();
    }

    @Override
    public LoginBasicDTO getLoginBasicDTO(String userName) {
        return (LoginBasicDTO) userRepository.getLoginBasicDTO(userName);
    }


    @Override
    public Long findUserIDByUserName(String userName) {
        return userRepository.getUserIDByUserName(userName);
    }

    @Override
    public User getUserEntityByID(Long userID) {
        return userRepository.getUserEntityByID(userID);
    }

    //show user
    @Override
    public List<UserShowDTO> getAllUsers() {
        return userRepository.findAllActiveUsers().stream()  // Ch·ªâ l·∫•y ng∆∞·ªùi d√πng c√≥ tr·∫°ng th√°i ACTIVE
                .map(user -> {
                    List<String> rolename = user.getUserRoles().stream()
                            .map(userRole -> userRole.getRole().getRoleName())
                            .collect(Collectors.toList());
                    return new UserShowDTO(
                            user.getUserId(),
                            user.getuserName(),  // L∆∞u √Ω l√† ph∆∞∆°ng th·ª©c getter ph·∫£i ƒë√∫ng ch√≠nh t·∫£ (getUserName() thay v√¨ getuserName())
                            user.getEmail(),
                            rolename
                    );
                })
                .collect(Collectors.toList());
    }


    //    end show user
//    create user
    @Override
    public User addUser(UserCreateDTO dto) {
        if (userRepository.existsByEmail(dto.getEmail())) {
            throw new UsernameNotFoundException("Email ƒë√£ t·ªìn t·∫°i");
        }
        if (userRepository.findByUserName(dto.getUserName()).isPresent()) {
            throw new RuntimeException("T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i");
        }


        // Kh·ªüi t·∫°o user
        User user = new User();
        user.setuserName(dto.getUserName());
        user.setEmail(dto.getEmail());
        user.setPassword(passwordEncoder.encode(dto.getPassword()));
        user.setFullName(dto.getFullName());
        user.setPhoneNumber(dto.getPhoneNumber());
        user.setAddress(dto.getAddress());
        user.setStatus("ACTIVE");
        user.setAccountStatus(AccountStatus.ACTIVE);
        user.setProvider("LOCAL");
        user.setEmailVerified(false);
        user.setCreatedAt(LocalDateTime.now());
        user.setUpdatedAt(LocalDateTime.now());
        if (dto.getDateOfBirth() != null) {
            user.setDateOfBirth(dto.getDateOfBirth());
        }
        // L∆∞u user tr∆∞·ªõc ƒë·ªÉ c√≥ ID
        User savedUser = userRepository.save(user);

        // T√¨m Role
        Role role = roleRepository.findByRoleName(dto.getRoleName())
                .orElseThrow(() -> new RuntimeException("Role kh√¥ng t·ªìn t·∫°i: " + dto.getRoleName()));

        // T·∫°o UserRoleId v√† UserRole
        UserRoleId userRoleId = new UserRoleId(savedUser.getUserId(), role.getRoleID());

        UserRole userRole = new UserRole();
        userRole.setId(userRoleId);
        userRole.setUser(savedUser);
        userRole.setRole(role);

        userRoleRepository.save(userRole);

        return savedUser;
    }

//end create user
    public String getFullName(String userName) {
        return userRepository.getFullName(userName);
    }

    //    update user ------------------------------------------------------------------------------------
//    show
  @Override
  public UserUpdateDTO getUserUpdateDTOById(Long id) {
        User user = userRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Khong Tim Thay User"));
        List<String> roles = user.getUserRoles().stream()
                .map(userRole -> userRole.getRole().getRoleName())
                .collect(Collectors.toList());
        return new UserUpdateDTO(
                user.getUserId(),
                user.getuserName(),             // userName
                user.getEmail(),                // email
                "",                             // password (ƒë·ªÉ tr·ªëng khi hi·ªÉn th·ªã form)
                user.getFullName(),             // fullName
                user.getDateOfBirth(),          // dateOfBirth
                user.getPhoneNumber(),          // phoneNumber
                user.getAddress(),              // address
                user.getImage(),                // image (l∆∞u URL ·∫£nh)
                roles


        );
  }

//  end show
@Override
public User updateUser(Long userId, UserUpdateDTO dto) {
//    System.out.println(dto);
//    System.out.println(userId);

    // T√¨m ng∆∞·ªùi d√πng theo userId
    User user = userRepository.findById(userId)
            .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng"));

    // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng th√¥ng tin c·ªßa ng∆∞·ªùi d√πng t·ª´ DTO
    user.setuserName(dto.getUserName());
    user.setEmail(dto.getEmail());
    user.setFullName(dto.getFullName());
    user.setDateOfBirth(dto.getDateOfBirth());
    user.setPhoneNumber(dto.getPhoneNumber());
    user.setAddress(dto.getAddress());

    // C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán n·∫øu c√≥
    if (dto.getImage() != null && !dto.getImage().isEmpty()) {
        user.setImage(dto.getImage());
    }

    // C·∫≠p nh·∫≠t vai tr√≤ (roles)
    if (dto.getRoleName() != null && !dto.getRoleName().isEmpty()) {
        // X√≥a h·∫øt c√°c quy·ªÅn c≈© c·ªßa ng∆∞·ªùi d√πng
        userRoleRepository.deleteByUserId(userId);

        // L·∫•y danh s√°ch Role t·ª´ t√™n (roleName) g·ª≠i l√™n t·ª´ frontend
        List<Role> roles = roleRepository.findByRoleNames(dto.getRoleName());
//        System.out.println(roles);

        // T·∫°o UserRole m·ªõi v·ªõi c√°c Role ƒë∆∞·ª£c ch·ªçn
        for (Role role : roles) {
            UserRole userRole = new UserRole();
            userRole.setUser(user);
            userRole.setRole(role);
            userRole.setAssignedAt(LocalDateTime.now());

            UserRoleId userRoleId = new UserRoleId();
            userRoleId.setUserId(user.getUserId().longValue()); // n·∫øu userID l√† Long
            userRoleId.setRoleId(role.getRoleID()); // ƒë·∫£m b·∫£o d√πng ƒë√∫ng getter

            userRole.setId(userRoleId); // üëâ d√≤ng quan tr·ªçng!

            userRoleRepository.save(userRole);
        }

    }

    // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng sau khi c·∫≠p nh·∫≠t
    return userRepository.save(user);
}

//    end update user ---------------------------------------------------------------------------------------

//    x√≥a m·ªÅm ---------------------------------------------------------------------------------------
    @Override
    public User softDeleteUser(Long userid){
        System.out.println(userid);
        User user = userRepository.findById(userid).orElseThrow(() -> new RuntimeException("Khong Tim Thay User"));
        user.setAccountStatus(AccountStatus.DELETED);
        User UpdatedUser = userRepository.save(user);

        return UpdatedUser;

    }

    @Override
    public Optional<User> findByUserName(String userName) {
        return userRepository.findByUserName(userName);
    }

    // end    x√≥a m·ªÅm ---------------------------------------------------------------------------------------


    @Override
    public Page<UserShowDTO> getAllUsers(int page, int size) {
        // T·∫°o Pageable cho ph√¢n trang, s·∫Øp x·∫øp theo ID gi·∫£m d·∫ßn
        Pageable pageable = PageRequest.of(page, size, Sort.by("id").descending());

        // L·∫•y d·ªØ li·ªáu t·ª´ repository, ch·ªâ l·∫•y user kh√¥ng b·ªã x√≥a
        Page<User> userPage = userRepository.findAllByAccountStatusNot("DELETED", pageable);

        // Chuy·ªÉn ƒë·ªïi t·ª´ Page<User> th√†nh Page<UserListDTO>
        return userPage.map(user -> {
            UserShowDTO dto = new UserShowDTO();
            dto.setUserID(user.getUserId());
            dto.setUserName(user.getuserName());
            dto.setEmail(user.getEmail());
            return dto;
        });
    }

}
