package com.codecampushubt.NCKH2024TQQD.service.PassResetServices;

import com.codecampushubt.NCKH2024TQQD.dao.PasswordResetTokenRepository;
import com.codecampushubt.NCKH2024TQQD.dao.UserRepository;
import com.codecampushubt.NCKH2024TQQD.entity.PasswordResetToken;
import com.codecampushubt.NCKH2024TQQD.entity.User;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.Optional;
import java.util.Random;

@Service
public class PassResetResetServiceImpl implements PassResetService {
    private final PasswordResetTokenRepository tokenRepo;
    private final UserRepository userRepository;
    private final JavaMailSender mailSender;
    private final PasswordEncoder passwordEncoder;

    public PassResetResetServiceImpl(PasswordResetTokenRepository tokenRepo,
                                     UserRepository userRepository,
                                     JavaMailSender mailSender,
                                     PasswordEncoder passwordEncoder) {
        this.tokenRepo = tokenRepo;
        this.userRepository = userRepository;
        this.mailSender = mailSender;
        this.passwordEncoder = passwordEncoder;

    }

    @Override
    public void sendOtpToEmail(String email) {
        System.out.println(email);
        Optional<User> userOpt = userRepository.findByEmail(email);
        if (userOpt.isEmpty()) throw new RuntimeException("Email kh√¥ng t·ªìn t·∫°i");

        // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ token t·ªìn t·∫°i th√¨ x√≥a
        Optional<PasswordResetToken> existingToken = tokenRepo.findByEmail(email);
        existingToken.ifPresent(token -> tokenRepo.delete(token));

        // T·∫°o OTP m·ªõi
        String otp = String.valueOf(new Random().nextInt(900000) + 100000);
        PasswordResetToken token = new PasswordResetToken();
        token.setEmail(email);
        token.setOtp(otp);
        token.setExpiryTime(LocalDateTime.now().plusMinutes(10));
        tokenRepo.save(token);

        // G·ª≠i mail - ƒëo·∫°n n√†y l·ªìng lu√¥n logic thay v√¨ g·ªçi h√†m ri√™ng
        try {
            MimeMessage mimeMessage = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(mimeMessage, true, "UTF-8");

            String htmlContent = "<div style='font-family: Arial, sans-serif; padding: 20px; background-color: #f5f5f5;'>"
                    + "<h2 style='color: #333;'>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>"
                    + "<p>Xin ch√†o,</p>"
                    + "<p>B·∫°n (ho·∫∑c ai ƒë√≥) ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n.</p>"
                    + "<p><strong>M√£ OTP c·ªßa b·∫°n l√†:</strong></p>"
                    + "<div style='font-size: 28px; font-weight: bold; color: #007bff; padding: 10px 0;'>" + otp + "</div>"
                    + "<p>OTP c√≥ hi·ªáu l·ª±c trong <strong>10 ph√∫t</strong>.</p>"
                    + "<p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, h√£y b·ªè qua email n√†y.</p>"
                    + "<hr style='margin-top: 30px;'/>"
                    + "<p style='font-size: 12px; color: #888;'>CodeHUBT - H·ªá th·ªëng h·ªçc t·∫≠p th√¥ng minh</p>"
                    + "</div>";

            helper.setTo(email);
            helper.setSubject("üõ°Ô∏è M√£ OTP ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u");
            helper.setText(htmlContent, true); // g·ª≠i HTML

            mailSender.send(mimeMessage);

        } catch (MessagingException e) {
            e.printStackTrace();
            throw new RuntimeException("L·ªói khi g·ª≠i email OTP", e);
        }
    }

    @Override
    public String verifyOtp(String email , String otp) {
        PasswordResetToken token = tokenRepo.findByEmail(email)
                .orElseThrow(()-> new RuntimeException(" Kh√¥ng T√¨m Th·∫•y Email c·ªßa b·∫°n "));
        if (!token.getOtp().equals(otp)) {
            return "Otp Kh√¥ng Ch√≠nh x√°c ";
        }
        if (token.getExpiryTime().isBefore(LocalDateTime.now())) {
            return "Otp ƒê√£ H·∫øt H·∫°n ";
        }

        return "done";
    }



    @Override
    public String resetPassword(String email , String otp , String newPassword) {
        PasswordResetToken token = tokenRepo.findByEmail(email)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y OTP cho email n√†y."));
        if (!token.getOtp().equals(otp)) {
            throw new RuntimeException("OTP Kh√¥ng Ch√≠nh X√°c");
        }
        if (token.getExpiryTime().isBefore(LocalDateTime.now())){
            throw new RuntimeException("OTP ƒë√£ h·∫øt h·∫°n");
        }
        User user = userRepository.findByEmail(email).orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y Ng∆∞·ªùi D√πng "));

        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
        tokenRepo.delete(token);
        return "done_p";

    }


}
